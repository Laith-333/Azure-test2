name: Build and Deploy to Azure Container Apps with MySQL and SQL Initialization

on:
  push:
    branches:
      - main

env:
  RESOURCE_GROUP: SecureAppGroup
  LOCATION: eastus
  ACR_NAME: secureappregistry
  MYSQL_SERVER_NAME: secureapp-mysql
  MYSQL_DATABASE_NAME: license_plate_api
  MYSQL_USERNAME: Laith333
  MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
  CONTAINER_APP_NAME: secure-container-app
  VNET_NAME: secureapp-vnet
  SUBNET_NAME: mysql-subnet
  PRIVATE_DNS_ZONE: privatelink.mysql.database.azure.com

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Azure Resources
      run: |
        # Create Resource Group
        az group create --name $RESOURCE_GROUP --location $LOCATION
        
        # Create Azure Container Registry (ACR)
        az acr create --resource-group $RESOURCE_GROUP --name $ACR_NAME --sku Basic

        # Enable Admin User for ACR
        az acr update -n $ACR_NAME --admin-enabled true

        # Create Flexible MySQL Server with Private Endpoint
        az mysql flexible-server create \
            --name $MYSQL_SERVER_NAME \
            --resource-group $RESOURCE_GROUP \
            --location $LOCATION \
            --admin-user $MYSQL_USERNAME \
            --admin-password $MYSQL_PASSWORD \
            --database-name $MYSQL_DATABASE_NAME \
            --vnet-name $VNET_NAME \
            --subnet $SUBNET_NAME \
            --public-access Disabled

        # Create Private DNS Zone
        az network private-dns zone create --resource-group $RESOURCE_GROUP --name $PRIVATE_DNS_ZONE

        # Link Private DNS Zone with Virtual Network
        az network private-dns link vnet create \
            --resource-group $RESOURCE_GROUP \
            --zone-name $PRIVATE_DNS_ZONE \
            --name PrivateDNSLink \
            --virtual-network $VNET_NAME \
            --registration-enabled false

    - name: Initialize Database with SQL Script
      run: |
        echo "Initializing the database with schema..."
        # Install MySQL client
        sudo apt-get update && sudo apt-get install -y mysql-client
        
        # Apply SQL schema to the database
        mysql -h $MYSQL_SERVER_NAME.mysql.database.azure.com \
              -u $MYSQL_USERNAME \
              -p$MYSQL_PASSWORD \
              --ssl-ca=/etc/ssl/certs/ca-certificates.crt \
              $MYSQL_DATABASE_NAME < sqerry.sql

    - name: Build and Push Docker Image to Azure Container Registry
      run: |
        # Log in to ACR
        az acr login --name $ACR_NAME
        
        # Build Docker Image
        docker build -t $ACR_NAME.azurecr.io/secure-api:latest .
        
        # Push Docker Image to ACR
        docker push $ACR_NAME.azurecr.io/secure-api:latest

    - name: Deploy Azure Container App
      run: |
        # Create Container App Environment
        az containerapp env create \
          --name $CONTAINER_APP_NAME-env \
          --resource-group $RESOURCE_GROUP \
          --location $LOCATION

        # Deploy the Container App
        az containerapp create \
          --name $CONTAINER_APP_NAME \
          --resource-group $RESOURCE_GROUP \
          --image $ACR_NAME.azurecr.io/secure-api:latest \
          --environment $CONTAINER_APP_NAME-env \
          --cpu 0.5 \
          --memory 1.0Gi \
          --ingress external \
          --target-port 8080 \
          --env-vars \
            DB_HOST=$MYSQL_SERVER_NAME.mysql.database.azure.com \
            DB_USER=$MYSQL_USERNAME \
            DB_PASSWORD=$MYSQL_PASSWORD \
            DB_NAME=$MYSQL_DATABASE_NAME

    - name: Output Container App URL
      run: |
        az containerapp show \
          --name $CONTAINER_APP_NAME \
          --resource-group $RESOURCE_GROUP \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv
